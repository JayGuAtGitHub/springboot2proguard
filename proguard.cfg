# fully inspired by https://medium.com/@ijayakantha/obfuscate-spring-boot-2-applications-with-proguard-a8a76586b11f
-target 1.8 ##Specify the java version number
-verbose ##打印处理信息，失败时会打印堆栈信息
-dontshrink ##Default is enabled, here the shrink is turned off, that is, the unused classes/members are not deleted.
-dontoptimize ##Default is enabled, here to turn off bytecode level optimization
-useuniqueclassmembernames ## Take a unique strategy for confusing the naming of class members
-adaptclassstrings ## After confusing the class name, replace it with a place like Class.forName('className')
-dontnote
-ignorewarnings ## warnings are ignored
-dontwarn
-keep class !com.YOUR_COMPAMY.YOUR_PROJECT.** { *; }
##mybatis plus可以通过声明接口动态创建类, 忽略所有接口可以解决部分bean无法动态创建的问题, 但是在本项目中, 使用XML的方式, 只忽略interface不够, 采用下面的方式
##比较好的方式是参照  https://blog.csdn.net/weixin_39886238/article/details/114600811  进行目录的组织, 可见目录组织有多重要
# -keep interface com.YOUR_COMPAMY.YOUR_PROJECT.** { *; }
##keep相关用法参照https://www.jianshu.com/p/b471db6a01af
##保留所有class名称(和member), 兼容mybatis plus, 如果没用mybatis+XML的话不推荐开启这个选项, 或者使用上面的方式, 这个方式会极大降低混淆力度, 不开这个很难读懂代码
-keepnames class com.YOUR_COMPAMY.YOUR_PROJECT.** { *; }
-keepattributes Signature # keep generic 保持泛型, 用来兼容mybatis plus问题, 没有泛型的话mybatis plus无法动态创建了
-keepattributes SourceFile,LineNumberTable # 保留报错行号信息, 如果没有经常需要线上排错信息的话可以不开启
-keep public class * extends org.springframework.boot.web.support.SpringBootServletInitializer
-keepdirectories ## Keep the package structure
-keepclasseswithmembers public class * { public static void main(java.lang.String[]);} ##Maintain the class of the main method and its method name
-keepclassmembers enum * { *; }  ##Reserving enumeration members and methods
-keepclassmembers class * {
     @org.springframework.beans.factory.annotation.Autowired *;
     @org.springframework.beans.factory.annotation.Qualifier *;
     @org.springframework.beans.factory.annotation.Value *;
     @org.springframework.beans.factory.annotation.Required *;
     @org.springframework.context.annotation.Bean *;
     @org.springframework.context.annotation.Primary *;
     @org.springframework.boot.context.properties.ConfigurationProperties *;
     @org.springframework.boot.context.properties.EnableConfigurationProperties *;
     @javax.inject.Inject *;
     @javax.annotation.PostConstruct *;
     @javax.annotation.PreDestroy *;
     @javax.annotation.Resource *;
}
-keepclassmembers @org.springframework.boot.context.properties.ConfigurationProperties public class * { *; }
-keep @org.springframework.cache.annotation.EnableCaching class *
-keep @org.springframework.context.annotation.Configuration class *
-keep @org.springframework.boot.context.properties.ConfigurationProperties class *
-keep @org.springframework.boot.autoconfigure.SpringBootApplication class *
-allowaccessmodification
-keepattributes *Annotation*
-keepdirectories com.YOUR_COMPAMY.YOUR_PROJECT
-keepdirectories org.springframework.boot.autoconfigure
## Do not change names of the getters and setter, if you remove this ##thymeleaf unable to find the getter and setter i.e: ##${greetingDTO.message}
-keepclassmembers class * {
    *** get*();
    void set*(***);
}
-keepclassmembernames class * {
     java.lang.Class class$(java.lang.String);
     java.lang.Class class$(java.lang.String, boolean);
}
-keepclassmembers enum * {
     public static **[] values();
     public static ** valueOf(java.lang.String);
     public static ** fromValue(java.lang.String);
}
-keepnames class * implements java.io.Serializable
# -keepclassmembernames public class com.test.blah.config.liquibase.AsyncSpringLiquibase
-keepclassmembers class * implements java.io.Serializable {
     static final long serialVersionUID;
     private static final java.io.ObjectStreamField[] serialPersistentFields;
     !static !transient <fields>;
     !private <fields>;
     !private <methods>;
     private void writeObject(java.io.ObjectOutputStream);
     private void readObject(java.io.ObjectInputStream);
     java.lang.Object writeReplace();
     java.lang.Object readResolve();
}
-keepclassmembers class * {
     @org.springframework.beans.factory.annotation.Autowired <fields>;
     @org.springframework.beans.factory.annotation.Autowired <methods>;
     @org.springframework.security.access.prepost.PreAuthorize <methods>;
}